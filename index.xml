<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0x3f</title>
    <link>/</link>
    <description>Recent content on 0x3f</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 14 Aug 2023 13:42:13 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>洛谷P1083</title>
      <link>/post/luogu-p1083/</link>
      <pubDate>Mon, 14 Aug 2023 13:42:13 +0800</pubDate>
      
      <guid>/post/luogu-p1083/</guid>
      
      <description>&lt;p&gt;可以发现,当第 $ i $ 个订单可以满足时,第 $ i-1 $ 个订单也可以满足.&lt;/p&gt;
&lt;p&gt;于是可以想到二分答案求解,差分计算每个订单,复杂度 $ O(n\log{n}) $ .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; num[&lt;span style=&#34;color:#099&#34;&gt;1000006&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; r[&lt;span style=&#34;color:#099&#34;&gt;1000006&lt;/span&gt;],n,m,res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;Node&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; l,r,k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}node[&lt;span style=&#34;color:#099&#34;&gt;1000006&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; x){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	res&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	memset(num,&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;sizeof&lt;/span&gt; num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;x;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		num[node[i].l]&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+=&lt;/span&gt;node[i].k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		num[node[i].r&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-=&lt;/span&gt;node[i].k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		res&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+=&lt;/span&gt;num[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;(res&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;r[i]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	scanf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%lld%lld&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;n,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;m);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		scanf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;r[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;m;i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		scanf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%lld%lld%lld&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;node[i].k,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;node[i].l,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;node[i].r);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;,r&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt;(l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;r){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; mid&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;(l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;r&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;(check(mid)){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;mid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			r&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;mid&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;(l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt;m){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;-1&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;%d&amp;#34;&lt;/span&gt;,l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意开&lt;code&gt;long long&lt;/code&gt;(大悲)&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>前缀和&amp;差分</title>
      <link>/post/prefixsum/</link>
      <pubDate>Fri, 11 Aug 2023 21:27:09 +0800</pubDate>
      
      <guid>/post/prefixsum/</guid>
      
      <description>&lt;h3 id=&#34;前缀和&#34;&gt;前缀和&lt;/h3&gt;
&lt;p&gt;作用:求区间和&lt;/p&gt;
&lt;p&gt;时间复杂度: $ O(n) $ 预处理, $ O(1) $ 查询.&lt;/p&gt;
&lt;h4 id=&#34;预处理&#34;&gt;预处理&lt;/h4&gt;
&lt;p&gt;假设原数组为$ a_1,a_2,a_3,&amp;hellip; $&lt;/p&gt;
&lt;p&gt;前缀和数组&lt;/p&gt;
&lt;p&gt;$ sum_1=a_1 $&lt;/p&gt;
&lt;p&gt;$ sum_2=a_1+a_2=sum_1+a_2 $&lt;/p&gt;
&lt;p&gt;$ sum_3=a_1+a_2+a_3=sum_2+a_3 $&lt;/p&gt;
&lt;p&gt;$ &amp;hellip; $&lt;/p&gt;
&lt;h4 id=&#34;查询&#34;&gt;查询&lt;/h4&gt;
&lt;p&gt;查询 $ [l,r] $ 区间内和：&lt;/p&gt;
&lt;p&gt;$ a_l+a_{l+1}+a_{l+2}+&amp;hellip;+a_{r-1}+a_{r} $&lt;/p&gt;
&lt;p&gt;$ =(a_1+a_2+&amp;hellip;+a_{r-1}+a_r)-(a_1+a_2+&amp;hellip;+a_{l-2}+a_{l-1}) $&lt;/p&gt;
&lt;p&gt;$ =sum_r-sum_{l-1} $&lt;/p&gt;
&lt;h3 id=&#34;差分&#34;&gt;差分&lt;/h3&gt;
&lt;p&gt;作用:区间加&lt;/p&gt;
&lt;p&gt;时间复杂度: $ O(n) $ 预处理, $ O(1) $ 修改.&lt;/p&gt;
&lt;p&gt;本质上是前缀和的逆运算.&lt;/p&gt;
&lt;h4 id=&#34;区间加&#34;&gt;区间加&lt;/h4&gt;
&lt;p&gt;通过对前缀和的研究,可以发现,当 &lt;code&gt;a[k]&lt;/code&gt;  增加了 &lt;code&gt;x&lt;/code&gt; 时,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sum[k]&lt;/code&gt;,&lt;code&gt;sum[k+1]&lt;/code&gt;, $ &amp;hellip; $ 都增加了 $ x $ .&lt;/p&gt;
&lt;p&gt;这样就实现了区间加.&lt;/p&gt;
&lt;p&gt;对 $ [l,r] $ 区间进行加 $ x $ 操作时,只需将 &lt;code&gt;sum[l]&lt;/code&gt; 增加 &lt;code&gt;x&lt;/code&gt; , 并将 &lt;code&gt;sum[r+1]&lt;/code&gt; 增加 &lt;code&gt;-x&lt;/code&gt; 即可.&lt;/p&gt;
&lt;h4 id=&#34;预处理-1&#34;&gt;预处理&lt;/h4&gt;
&lt;p&gt;求差分数组 &lt;code&gt;d&lt;/code&gt; (将原数组 &lt;code&gt;a&lt;/code&gt; 当作前缀和).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a[i]=a[i-1]+d[i]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;移项,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a[i]-a[i-1]=d[i]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就完成了转换.&lt;/p&gt;
&lt;h3 id=&#34;应用&#34;&gt;应用&lt;/h3&gt;
&lt;h4 id=&#34;二维前缀和&#34;&gt;二维前缀和&lt;/h4&gt;
&lt;h5 id=&#34;预处理-2&#34;&gt;预处理&lt;/h5&gt;
&lt;p&gt;基于容斥原理.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+a[i][j]&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;查询-1&#34;&gt;查询&lt;/h5&gt;
&lt;p&gt;求 $ (x_1,y_1) $ 到 $ (x_2,y_2) $ 的和.&lt;/p&gt;
&lt;p&gt;$ \sum_{i=x_1}^{x_2} \sum_{j=y_1}^{y_2} a_{i,j} $ = &lt;code&gt;sum[x2][y2]-sum[x1-1][y2]-sum[x2][y1-1]+sum[x1-1][y1-1]&lt;/code&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 10 Aug 2023 20:40:09 +0800</pubDate>
      
      <guid>/about/</guid>
      
      <description>&lt;p&gt;在互联网上属于FN的小角落.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>二分</title>
      <link>/post/binary-search/</link>
      <pubDate>Thu, 10 Aug 2023 20:13:23 +0800</pubDate>
      
      <guid>/post/binary-search/</guid>
      
      <description>&lt;h3 id=&#34;前提条件-满足单调性&#34;&gt;前提条件-满足单调性&lt;/h3&gt;
&lt;p&gt;满足单调性:&lt;/p&gt;
&lt;p&gt;✅✅✅✅✅✅❌❌❌❌
(求最大值)&lt;/p&gt;
&lt;p&gt;❌❌❌✅✅✅✅✅✅✅
(求最小值)&lt;/p&gt;
&lt;p&gt;不满足单调性:&lt;/p&gt;
&lt;p&gt;✅❌✅✅✅❌
(&lt;del&gt;建议直接暴力&lt;/del&gt;)&lt;/p&gt;
&lt;h3 id=&#34;求最大值&#34;&gt;求最大值&lt;/h3&gt;
&lt;h4 id=&#34;例子&#34;&gt;例子&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;✅✅✅✅✅✅❌❌❌❌&lt;/code&gt;中查找最大的✅&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$ L=1,R=10,MID=(1+10+1)/2=6 $&lt;/p&gt;
&lt;p&gt;✅✅✅✅✅&lt;mark&gt;✅&lt;/mark&gt;❌❌❌❌&lt;/p&gt;
&lt;p&gt;满足,所以 $ L=MID=6 $&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ L=6,R=10,MID=(6+10+1)/2=8 $&lt;/p&gt;
&lt;p&gt;✅✅✅✅✅✅❌&lt;mark&gt;❌&lt;/mark&gt;❌❌&lt;/p&gt;
&lt;p&gt;不满足,所以 $ R=MID-1=7 $&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ L=6,R=7,mid=(6+7+1)/2=7 $&lt;/p&gt;
&lt;p&gt;✅✅✅✅✅✅&lt;mark&gt;❌&lt;/mark&gt;❌❌❌&lt;/p&gt;
&lt;p&gt;不满足,所以 $ R=MID-1=6 $&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为 $ L=R $ ,所以二分结束.&lt;/p&gt;
&lt;h4 id=&#34;code&#34;&gt;code&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt;(l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;r){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; mid&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;(l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;r&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;(check(mid)){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;mid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;mid&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;求最小值&#34;&gt;求最小值&lt;/h3&gt;
&lt;h4 id=&#34;例子-1&#34;&gt;例子&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;❌❌❌✅✅✅✅✅✅✅&lt;/code&gt;中查找最小的✅&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$ L=1,R=10,MID=(1+10)/2=5 $&lt;/p&gt;
&lt;p&gt;❌❌❌✅&lt;mark&gt;✅&lt;/mark&gt;✅✅✅✅✅&lt;/p&gt;
&lt;p&gt;满足,所以 $ R=MID=5 $&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ L=1,R=5,MID=(1+5)/2=3 $&lt;/p&gt;
&lt;p&gt;❌❌&lt;mark&gt;❌&lt;/mark&gt;✅✅✅✅✅✅✅&lt;/p&gt;
&lt;p&gt;不满足,所以 $ L=MID+1=4 $&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ L=4,R=5,MID=(4+5)/2=4 $&lt;/p&gt;
&lt;p&gt;❌❌❌✅&lt;mark&gt;✅&lt;/mark&gt;✅✅✅✅✅&lt;/p&gt;
&lt;p&gt;满足,所以 $ R=4 $&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为 $ L=R $ ,所以二分结束.&lt;/p&gt;
&lt;h4 id=&#34;code-1&#34;&gt;code&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt;(l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;r) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; mid&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;(l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;r)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;(check(mid)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;mid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;mid&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
  </channel>
</rss>

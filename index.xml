<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>0x3f</title><link>https://findnick.top/</link><description>Recent content on 0x3f</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 14 Aug 2023 13:42:13 +0800</lastBuildDate><atom:link href="https://findnick.top/index.xml" rel="self" type="application/rss+xml"/><item><title>洛谷P1083</title><link>https://findnick.top/post/luogu-p1083/</link><pubDate>Mon, 14 Aug 2023 13:42:13 +0800</pubDate><guid>https://findnick.top/post/luogu-p1083/</guid><description>&lt;p>可以发现,当第 $ i $ 个订单可以满足时,第 $ i-1 $ 个订单也可以满足.&lt;/p>
&lt;p>于是可以想到二分答案求解,差分计算每个订单,复杂度 $ O(n\log{n}) $ .&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">&lt;/span>&lt;span style="color:#5317ac">using&lt;/span> &lt;span style="color:#5317ac">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> num[&lt;span style="color:#0000c0">1000006&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> r[&lt;span style="color:#0000c0">1000006&lt;/span>],n,m,res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5317ac">struct&lt;/span> Node{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> l,r,k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}node[&lt;span style="color:#0000c0">1000006&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> &lt;span style="color:#721045">check&lt;/span>(&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(num,&lt;span style="color:#0000c0">0&lt;/span>,&lt;span style="color:#5317ac">sizeof&lt;/span> num);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>x;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num[node[i].l]&lt;span style="color:#00538b">+=&lt;/span>node[i].k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num[node[i].r&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>]&lt;span style="color:#00538b">-=&lt;/span>node[i].k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#00538b">+=&lt;/span>num[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(res&lt;span style="color:#00538b">&amp;gt;&lt;/span>r[i]){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> &lt;span style="color:#721045">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%lld%lld&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>n,&lt;span style="color:#00538b">&amp;amp;&lt;/span>m);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%lld&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>r[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>m;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%lld%lld%lld&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>node[i].k,&lt;span style="color:#00538b">&amp;amp;&lt;/span>node[i].l,&lt;span style="color:#00538b">&amp;amp;&lt;/span>node[i].r);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> l&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>,r&lt;span style="color:#00538b">=&lt;/span>m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">while&lt;/span>(l&lt;span style="color:#00538b">&amp;lt;&lt;/span>r){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> mid&lt;span style="color:#00538b">=&lt;/span>(l&lt;span style="color:#00538b">+&lt;/span>r&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>)&lt;span style="color:#00538b">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(check(mid)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#00538b">=&lt;/span>mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#00538b">=&lt;/span>mid&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(l&lt;span style="color:#00538b">==&lt;/span>m){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#2544bb">&amp;#34;0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#2544bb">&amp;#34;-1&lt;/span>&lt;span style="color:#2544bb">\n&lt;/span>&lt;span style="color:#2544bb">%d&amp;#34;&lt;/span>,l&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意开&lt;code>long long&lt;/code>(大悲)&lt;/p></description></item><item><title>洛谷P1311</title><link>https://findnick.top/post/luogu-p1311/</link><pubDate>Mon, 14 Aug 2023 13:41:59 +0800</pubDate><guid>https://findnick.top/post/luogu-p1311/</guid><description>&lt;p>$ O(n) $ 做法&lt;/p>
&lt;p>首先预处理一个数组&lt;code>res[i]&lt;/code>,表示第 $ 1 $ 到 $ i $ 的客栈中编号最大且满足最低消费小于等于q的客栈编号;&lt;/p>
&lt;p>维护一个前缀和数组&lt;code>ans[i][j]&lt;/code>,i为颜色,j为编号, $ O(1) $ 求出 1~j 中有多少个颜色为i的客栈;&lt;/p>
&lt;p>枚举较大的客栈的编号i,&lt;code>1~res[i]&lt;/code> 是不考虑颜色因素所能选的区间,ans[i][res[i]]即是右端点为i时的答案.&lt;/p>
&lt;p>注意当res[i]=i时,因为一个客栈不能选两次,因此答案要减一.&lt;/p>
&lt;p>累加即可.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">&lt;/span>&lt;span style="color:#5317ac">using&lt;/span> &lt;span style="color:#5317ac">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> n,k,p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> a[&lt;span style="color:#0000c0">200005&lt;/span>],b,res[&lt;span style="color:#0000c0">200005&lt;/span>],ans[&lt;span style="color:#0000c0">55&lt;/span>][&lt;span style="color:#0000c0">200005&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> ret&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> &lt;span style="color:#721045">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(res,&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>,&lt;span style="color:#5317ac">sizeof&lt;/span> res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%d%d%d&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>n,&lt;span style="color:#00538b">&amp;amp;&lt;/span>k,&lt;span style="color:#00538b">&amp;amp;&lt;/span>p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%d%d&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>a[i],&lt;span style="color:#00538b">&amp;amp;&lt;/span>b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(b&lt;span style="color:#00538b">&amp;lt;=&lt;/span>p){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res[i]&lt;span style="color:#00538b">=&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res[i]&lt;span style="color:#00538b">=&lt;/span>res[i&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> type&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>;type&lt;span style="color:#00538b">&amp;lt;=&lt;/span>k;type&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans[type][i]&lt;span style="color:#00538b">=&lt;/span>ans[type][i&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(a[i]&lt;span style="color:#00538b">==&lt;/span>type){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans[type][i]&lt;span style="color:#00538b">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(i&lt;span style="color:#00538b">==&lt;/span>res[i]){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret&lt;span style="color:#00538b">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret&lt;span style="color:#00538b">+=&lt;/span>ans[a[i]][res[i]];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#2544bb">&amp;#34;%lld&amp;#34;&lt;/span>,ret);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>前缀和&amp;差分</title><link>https://findnick.top/post/prefixsum/</link><pubDate>Fri, 11 Aug 2023 21:27:09 +0800</pubDate><guid>https://findnick.top/post/prefixsum/</guid><description>&lt;h3 id="前缀和">前缀和&lt;/h3>
&lt;p>作用:求区间和&lt;/p>
&lt;p>时间复杂度: $ O(n) $ 预处理, $ O(1) $ 查询.&lt;/p>
&lt;h4 id="预处理">预处理&lt;/h4>
&lt;p>假设原数组为$ a_1,a_2,a_3,&amp;hellip; $&lt;/p>
&lt;p>前缀和数组&lt;/p>
&lt;p>$ sum_1=a_1 $&lt;/p>
&lt;p>$ sum_2=a_1+a_2=sum_1+a_2 $&lt;/p>
&lt;p>$ sum_3=a_1+a_2+a_3=sum_2+a_3 $&lt;/p>
&lt;p>$ &amp;hellip; $&lt;/p>
&lt;h4 id="查询">查询&lt;/h4>
&lt;p>查询 $ [l,r] $ 区间内和：&lt;/p>
&lt;p>$ a_l+a_{l+1}+a_{l+2}+&amp;hellip;+a_{r-1}+a_{r} $&lt;/p>
&lt;p>$ =(a_1+a_2+&amp;hellip;+a_{r-1}+a_r)-(a_1+a_2+&amp;hellip;+a_{l-2}+a_{l-1}) $&lt;/p>
&lt;p>$ =sum_r-sum_{l-1} $&lt;/p>
&lt;h3 id="差分">差分&lt;/h3>
&lt;p>作用:区间加&lt;/p>
&lt;p>时间复杂度: $ O(n) $ 预处理, $ O(1) $ 修改.&lt;/p>
&lt;p>本质上是前缀和的逆运算.&lt;/p>
&lt;h4 id="区间加">区间加&lt;/h4>
&lt;p>通过对前缀和的研究,可以发现,当 &lt;code>a[k]&lt;/code> 增加了 &lt;code>x&lt;/code> 时,&lt;/p>
&lt;p>&lt;code>sum[k]&lt;/code>,&lt;code>sum[k+1]&lt;/code>, $ &amp;hellip; $ 都增加了 $ x $ .&lt;/p>
&lt;p>这样就实现了区间加.&lt;/p>
&lt;p>对 $ [l,r] $ 区间进行加 $ x $ 操作时,只需将 &lt;code>sum[l]&lt;/code> 增加 &lt;code>x&lt;/code> , 并将 &lt;code>sum[r+1]&lt;/code> 增加 &lt;code>-x&lt;/code> 即可.&lt;/p>
&lt;h4 id="预处理-1">预处理&lt;/h4>
&lt;p>求差分数组 &lt;code>d&lt;/code> (将原数组 &lt;code>a&lt;/code> 当作前缀和).&lt;/p>
&lt;p>&lt;code>a[i]=a[i-1]+d[i]&lt;/code>&lt;/p>
&lt;p>移项,&lt;/p>
&lt;p>&lt;code>a[i]-a[i-1]=d[i]&lt;/code>&lt;/p>
&lt;p>这样就完成了转换.&lt;/p>
&lt;h3 id="应用">应用&lt;/h3>
&lt;h4 id="二维前缀和">二维前缀和&lt;/h4>
&lt;h5 id="预处理-2">预处理&lt;/h5>
&lt;p>基于容斥原理.&lt;/p>
&lt;p>&lt;code>sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+a[i][j]&lt;/code>&lt;/p>
&lt;h5 id="查询-1">查询&lt;/h5>
&lt;p>求 $ (x_1,y_1) $ 到 $ (x_2,y_2) $ 的和.&lt;/p>
&lt;p>$ \sum_{i=x_1}^{x_2} \sum_{j=y_1}^{y_2} a_{i,j} $ = &lt;code>sum[x2][y2]-sum[x1-1][y2]-sum[x2][y1-1]+sum[x1-1][y1-1]&lt;/code>.&lt;/p></description></item><item><title>About</title><link>https://findnick.top/about/</link><pubDate>Thu, 10 Aug 2023 20:40:09 +0800</pubDate><guid>https://findnick.top/about/</guid><description>&lt;p>在互联网上属于FN的小角落.&lt;/p></description></item><item><title>二分</title><link>https://findnick.top/post/binary-search/</link><pubDate>Thu, 10 Aug 2023 20:13:23 +0800</pubDate><guid>https://findnick.top/post/binary-search/</guid><description>&lt;h3 id="前提条件-满足单调性">前提条件-满足单调性&lt;/h3>
&lt;p>满足单调性:&lt;/p>
&lt;p>✅✅✅✅✅✅❌❌❌❌
(求最大值)&lt;/p>
&lt;p>❌❌❌✅✅✅✅✅✅✅
(求最小值)&lt;/p>
&lt;p>不满足单调性:&lt;/p>
&lt;p>✅❌✅✅✅❌
(&lt;del>建议直接暴力&lt;/del>)&lt;/p>
&lt;h3 id="求最大值">求最大值&lt;/h3>
&lt;h4 id="例子">例子&lt;/h4>
&lt;p>在&lt;code>✅✅✅✅✅✅❌❌❌❌&lt;/code>中查找最大的✅&lt;/p>
&lt;ol>
&lt;li>
&lt;p>$ L=1,R=10,MID=(1+10+1)/2=6 $&lt;/p>
&lt;p>✅✅✅✅✅&lt;mark>✅&lt;/mark>❌❌❌❌&lt;/p>
&lt;p>满足,所以 $ L=MID=6 $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$ L=6,R=10,MID=(6+10+1)/2=8 $&lt;/p>
&lt;p>✅✅✅✅✅✅❌&lt;mark>❌&lt;/mark>❌❌&lt;/p>
&lt;p>不满足,所以 $ R=MID-1=7 $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$ L=6,R=7,mid=(6+7+1)/2=7 $&lt;/p>
&lt;p>✅✅✅✅✅✅&lt;mark>❌&lt;/mark>❌❌❌&lt;/p>
&lt;p>不满足,所以 $ R=MID-1=6 $&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>因为 $ L=R $ ,所以二分结束.&lt;/p>
&lt;h4 id="code">code&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5317ac">while&lt;/span>(l&lt;span style="color:#00538b">&amp;lt;&lt;/span>r){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">int&lt;/span> mid&lt;span style="color:#00538b">=&lt;/span>(l&lt;span style="color:#00538b">+&lt;/span>r&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>)&lt;span style="color:#00538b">/&lt;/span>&lt;span style="color:#0000c0">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(check(mid)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#00538b">=&lt;/span>mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#00538b">=&lt;/span>mid&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="求最小值">求最小值&lt;/h3>
&lt;h4 id="例子-1">例子&lt;/h4>
&lt;p>在&lt;code>❌❌❌✅✅✅✅✅✅✅&lt;/code>中查找最小的✅&lt;/p>
&lt;ol>
&lt;li>
&lt;p>$ L=1,R=10,MID=(1+10)/2=5 $&lt;/p>
&lt;p>❌❌❌✅&lt;mark>✅&lt;/mark>✅✅✅✅✅&lt;/p>
&lt;p>满足,所以 $ R=MID=5 $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$ L=1,R=5,MID=(1+5)/2=3 $&lt;/p>
&lt;p>❌❌&lt;mark>❌&lt;/mark>✅✅✅✅✅✅✅&lt;/p>
&lt;p>不满足,所以 $ L=MID+1=4 $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$ L=4,R=5,MID=(4+5)/2=4 $&lt;/p>
&lt;p>❌❌❌✅&lt;mark>✅&lt;/mark>✅✅✅✅✅&lt;/p>
&lt;p>满足,所以 $ R=4 $&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>因为 $ L=R $ ,所以二分结束.&lt;/p>
&lt;h4 id="code-1">code&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5317ac">while&lt;/span>(l&lt;span style="color:#00538b">&amp;lt;&lt;/span>r) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> mid&lt;span style="color:#00538b">=&lt;/span>(l&lt;span style="color:#00538b">+&lt;/span>r)&lt;span style="color:#00538b">/&lt;/span>&lt;span style="color:#0000c0">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(check(mid)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#00538b">=&lt;/span>mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#5317ac">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#00538b">=&lt;/span>mid&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>
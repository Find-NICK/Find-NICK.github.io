<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>solution on 0x3f</title><link>https://findnick.top/tags/solution/</link><description>Recent content in solution on 0x3f</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 14 Aug 2023 13:42:13 +0800</lastBuildDate><atom:link href="https://findnick.top/tags/solution/index.xml" rel="self" type="application/rss+xml"/><item><title>洛谷P1083</title><link>https://findnick.top/post/luogu-p1083/</link><pubDate>Mon, 14 Aug 2023 13:42:13 +0800</pubDate><guid>https://findnick.top/post/luogu-p1083/</guid><description>&lt;p>可以发现,当第 $ i $ 个订单可以满足时,第 $ i-1 $ 个订单也可以满足.&lt;/p>
&lt;p>于是可以想到二分答案求解,差分计算每个订单,复杂度 $ O(n\log{n}) $ .&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">&lt;/span>&lt;span style="color:#5317ac">using&lt;/span> &lt;span style="color:#5317ac">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> num[&lt;span style="color:#0000c0">1000006&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> r[&lt;span style="color:#0000c0">1000006&lt;/span>],n,m,res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5317ac">struct&lt;/span> Node{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> l,r,k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}node[&lt;span style="color:#0000c0">1000006&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> &lt;span style="color:#721045">check&lt;/span>(&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(num,&lt;span style="color:#0000c0">0&lt;/span>,&lt;span style="color:#5317ac">sizeof&lt;/span> num);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>x;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num[node[i].l]&lt;span style="color:#00538b">+=&lt;/span>node[i].k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num[node[i].r&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>]&lt;span style="color:#00538b">-=&lt;/span>node[i].k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#00538b">+=&lt;/span>num[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(res&lt;span style="color:#00538b">&amp;gt;&lt;/span>r[i]){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> &lt;span style="color:#721045">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%lld%lld&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>n,&lt;span style="color:#00538b">&amp;amp;&lt;/span>m);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%lld&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>r[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>m;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%lld%lld%lld&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>node[i].k,&lt;span style="color:#00538b">&amp;amp;&lt;/span>node[i].l,&lt;span style="color:#00538b">&amp;amp;&lt;/span>node[i].r);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> l&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>,r&lt;span style="color:#00538b">=&lt;/span>m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">while&lt;/span>(l&lt;span style="color:#00538b">&amp;lt;&lt;/span>r){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> mid&lt;span style="color:#00538b">=&lt;/span>(l&lt;span style="color:#00538b">+&lt;/span>r&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>)&lt;span style="color:#00538b">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(check(mid)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#00538b">=&lt;/span>mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#00538b">=&lt;/span>mid&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(l&lt;span style="color:#00538b">==&lt;/span>m){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#2544bb">&amp;#34;0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#2544bb">&amp;#34;-1&lt;/span>&lt;span style="color:#2544bb">\n&lt;/span>&lt;span style="color:#2544bb">%d&amp;#34;&lt;/span>,l&lt;span style="color:#00538b">+&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意开&lt;code>long long&lt;/code>(大悲)&lt;/p></description></item><item><title>洛谷P1311</title><link>https://findnick.top/post/luogu-p1311/</link><pubDate>Mon, 14 Aug 2023 13:41:59 +0800</pubDate><guid>https://findnick.top/post/luogu-p1311/</guid><description>&lt;p>$ O(n) $ 做法&lt;/p>
&lt;p>首先预处理一个数组&lt;code>res[i]&lt;/code>,表示第 $ 1 $ 到 $ i $ 的客栈中编号最大且满足最低消费小于等于q的客栈编号;&lt;/p>
&lt;p>维护一个前缀和数组&lt;code>ans[i][j]&lt;/code>,i为颜色,j为编号, $ O(1) $ 求出 1~j 中有多少个颜色为i的客栈;&lt;/p>
&lt;p>枚举较大的客栈的编号i,&lt;code>1~res[i]&lt;/code> 是不考虑颜色因素所能选的区间,ans[i][res[i]]即是右端点为i时的答案.&lt;/p>
&lt;p>注意当res[i]=i时,因为一个客栈不能选两次,因此答案要减一.&lt;/p>
&lt;p>累加即可.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">#include&lt;/span>&lt;span style="color:#505050">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#505050">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">&lt;/span>&lt;span style="color:#5317ac">using&lt;/span> &lt;span style="color:#5317ac">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> n,k,p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> a[&lt;span style="color:#0000c0">200005&lt;/span>],b,res[&lt;span style="color:#0000c0">200005&lt;/span>],ans[&lt;span style="color:#0000c0">55&lt;/span>][&lt;span style="color:#0000c0">200005&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">long&lt;/span> &lt;span style="color:#005a5f">long&lt;/span> ret&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#005a5f">int&lt;/span> &lt;span style="color:#721045">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(res,&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>,&lt;span style="color:#5317ac">sizeof&lt;/span> res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%d%d%d&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>n,&lt;span style="color:#00538b">&amp;amp;&lt;/span>k,&lt;span style="color:#00538b">&amp;amp;&lt;/span>p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#2544bb">&amp;#34;%d%d&amp;#34;&lt;/span>,&lt;span style="color:#00538b">&amp;amp;&lt;/span>a[i],&lt;span style="color:#00538b">&amp;amp;&lt;/span>b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(b&lt;span style="color:#00538b">&amp;lt;=&lt;/span>p){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res[i]&lt;span style="color:#00538b">=&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res[i]&lt;span style="color:#00538b">=&lt;/span>res[i&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> type&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">0&lt;/span>;type&lt;span style="color:#00538b">&amp;lt;=&lt;/span>k;type&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans[type][i]&lt;span style="color:#00538b">=&lt;/span>ans[type][i&lt;span style="color:#00538b">-&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(a[i]&lt;span style="color:#00538b">==&lt;/span>type){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans[type][i]&lt;span style="color:#00538b">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">for&lt;/span>(&lt;span style="color:#005a5f">int&lt;/span> i&lt;span style="color:#00538b">=&lt;/span>&lt;span style="color:#0000c0">1&lt;/span>;i&lt;span style="color:#00538b">&amp;lt;=&lt;/span>n;i&lt;span style="color:#00538b">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">if&lt;/span>(i&lt;span style="color:#00538b">==&lt;/span>res[i]){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret&lt;span style="color:#00538b">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret&lt;span style="color:#00538b">+=&lt;/span>ans[a[i]][res[i]];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#2544bb">&amp;#34;%lld&amp;#34;&lt;/span>,ret);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5317ac">return&lt;/span> &lt;span style="color:#0000c0">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>
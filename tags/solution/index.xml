<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>solution on 0x3f</title><link>https://findnick.top/tags/solution/</link><description>Recent content in solution on 0x3f</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 14 Aug 2023 13:42:13 +0800</lastBuildDate><atom:link href="https://findnick.top/tags/solution/index.xml" rel="self" type="application/rss+xml"/><item><title>洛谷P1083</title><link>https://findnick.top/post/luogu-p1083/</link><pubDate>Mon, 14 Aug 2023 13:42:13 +0800</pubDate><guid>https://findnick.top/post/luogu-p1083/</guid><description>&lt;p>可以发现,当第 $ i $ 个订单可以满足时,第 $ i-1 $ 个订单也可以满足.&lt;/p>
&lt;p>于是可以想到二分答案求解,差分计算每个订单,复杂度 $ O(n\log{n}) $ .&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#289870">#include&lt;/span>&lt;span style="color:#289870">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#289870">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#289870">#include&lt;/span>&lt;span style="color:#289870">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#289870">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#289870">#include&lt;/span>&lt;span style="color:#289870">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#289870">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#289870">&lt;/span>&lt;span style="color:#2838b0">using&lt;/span> &lt;span style="color:#2838b0">namespace&lt;/span> std&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">long&lt;/span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> num&lt;span style="color:#888">[&lt;/span>&lt;span style="color:#444">1000006&lt;/span>&lt;span style="color:#888">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">long&lt;/span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> r&lt;span style="color:#888">[&lt;/span>&lt;span style="color:#444">1000006&lt;/span>&lt;span style="color:#888">],&lt;/span>n&lt;span style="color:#888">,&lt;/span>m&lt;span style="color:#888">,&lt;/span>res&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0">struct&lt;/span> &lt;span style="color:#287088">Node&lt;/span>&lt;span style="color:#888">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> l&lt;span style="color:#888">,&lt;/span>r&lt;span style="color:#888">,&lt;/span>k&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">}&lt;/span>node&lt;span style="color:#888">[&lt;/span>&lt;span style="color:#444">1000006&lt;/span>&lt;span style="color:#888">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> &lt;span style="color:#785840">check&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">long&lt;/span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> x&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset&lt;span style="color:#888">(&lt;/span>num&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#2838b0">sizeof&lt;/span> num&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> i&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">&amp;lt;=&lt;/span>x&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num&lt;span style="color:#888">[&lt;/span>node&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">].&lt;/span>l&lt;span style="color:#888">]&lt;/span>&lt;span style="color:#666">+=&lt;/span>node&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">].&lt;/span>k&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num&lt;span style="color:#888">[&lt;/span>node&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">].&lt;/span>r&lt;span style="color:#666">+&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">]&lt;/span>&lt;span style="color:#666">-=&lt;/span>node&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">].&lt;/span>k&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> i&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">&amp;lt;=&lt;/span>n&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#666">+=&lt;/span>num&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">if&lt;/span>&lt;span style="color:#888">(&lt;/span>res&lt;span style="color:#666">&amp;gt;&lt;/span>r&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">return&lt;/span> &lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">return&lt;/span> &lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> &lt;span style="color:#785840">main&lt;/span>&lt;span style="color:#888">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;%lld%lld&amp;#34;&lt;/span>&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>n&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>m&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> i&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">&amp;lt;=&lt;/span>n&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;%lld&amp;#34;&lt;/span>&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>r&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> i&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">&amp;lt;=&lt;/span>m&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;%lld%lld%lld&amp;#34;&lt;/span>&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>node&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">].&lt;/span>k&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>node&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">].&lt;/span>l&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>node&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">].&lt;/span>r&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> l&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">,&lt;/span>r&lt;span style="color:#666">=&lt;/span>m&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">while&lt;/span>&lt;span style="color:#888">(&lt;/span>l&lt;span style="color:#666">&amp;lt;&lt;/span>r&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> mid&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#888">(&lt;/span>l&lt;span style="color:#666">+&lt;/span>r&lt;span style="color:#666">+&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">)&lt;/span>&lt;span style="color:#666">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">if&lt;/span>&lt;span style="color:#888">(&lt;/span>check&lt;span style="color:#888">(&lt;/span>mid&lt;span style="color:#888">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#666">=&lt;/span>mid&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">else&lt;/span>&lt;span style="color:#888">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#666">=&lt;/span>mid&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">if&lt;/span>&lt;span style="color:#888">(&lt;/span>l&lt;span style="color:#666">==&lt;/span>m&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">else&lt;/span>&lt;span style="color:#888">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;-1&lt;/span>&lt;span style="color:#709030">\n&lt;/span>&lt;span style="color:#b83838">%d&amp;#34;&lt;/span>&lt;span style="color:#888">,&lt;/span>l&lt;span style="color:#666">+&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">return&lt;/span> &lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意开&lt;code>long long&lt;/code>(大悲)&lt;/p></description></item><item><title>洛谷P1311</title><link>https://findnick.top/post/luogu-p1311/</link><pubDate>Mon, 14 Aug 2023 13:41:59 +0800</pubDate><guid>https://findnick.top/post/luogu-p1311/</guid><description>&lt;p>$ O(n) $ 做法&lt;/p>
&lt;p>首先预处理一个数组&lt;code>res[i]&lt;/code>,表示第 $ 1 $ 到 $ i $ 的客栈中编号最大且满足最低消费小于等于q的客栈编号;&lt;/p>
&lt;p>维护一个前缀和数组&lt;code>ans[i][j]&lt;/code>,i为颜色,j为编号, $ O(1) $ 求出 1~j 中有多少个颜色为i的客栈;&lt;/p>
&lt;p>枚举较大的客栈的编号i,&lt;code>1~res[i]&lt;/code> 是不考虑颜色因素所能选的区间,ans[i][res[i]]即是右端点为i时的答案.&lt;/p>
&lt;p>注意当res[i]=i时,因为一个客栈不能选两次,因此答案要减一.&lt;/p>
&lt;p>累加即可.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#289870">#include&lt;/span>&lt;span style="color:#289870">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#289870">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#289870">#include&lt;/span>&lt;span style="color:#289870">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#289870">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#289870">&lt;/span>&lt;span style="color:#2838b0">using&lt;/span> &lt;span style="color:#2838b0">namespace&lt;/span> std&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> n&lt;span style="color:#888">,&lt;/span>k&lt;span style="color:#888">,&lt;/span>p&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> a&lt;span style="color:#888">[&lt;/span>&lt;span style="color:#444">200005&lt;/span>&lt;span style="color:#888">],&lt;/span>b&lt;span style="color:#888">,&lt;/span>res&lt;span style="color:#888">[&lt;/span>&lt;span style="color:#444">200005&lt;/span>&lt;span style="color:#888">],&lt;/span>ans&lt;span style="color:#888">[&lt;/span>&lt;span style="color:#444">55&lt;/span>&lt;span style="color:#888">][&lt;/span>&lt;span style="color:#444">200005&lt;/span>&lt;span style="color:#888">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">long&lt;/span> &lt;span style="color:#2838b0;font-style:italic">long&lt;/span> ret&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> &lt;span style="color:#785840">main&lt;/span>&lt;span style="color:#888">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset&lt;span style="color:#888">(&lt;/span>res&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#2838b0">sizeof&lt;/span> res&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;%d%d%d&amp;#34;&lt;/span>&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>n&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>k&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>p&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> i&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">&amp;lt;=&lt;/span>n&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;%d%d&amp;#34;&lt;/span>&lt;span style="color:#888">,&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>a&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">],&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span>b&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">if&lt;/span>&lt;span style="color:#888">(&lt;/span>b&lt;span style="color:#666">&amp;lt;=&lt;/span>p&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]&lt;/span>&lt;span style="color:#666">=&lt;/span>i&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">else&lt;/span>&lt;span style="color:#888">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]&lt;/span>&lt;span style="color:#666">=&lt;/span>res&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> i&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">&amp;lt;=&lt;/span>n&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> type&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">;&lt;/span>type&lt;span style="color:#666">&amp;lt;=&lt;/span>k&lt;span style="color:#888">;&lt;/span>type&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans&lt;span style="color:#888">[&lt;/span>type&lt;span style="color:#888">][&lt;/span>i&lt;span style="color:#888">]&lt;/span>&lt;span style="color:#666">=&lt;/span>ans&lt;span style="color:#888">[&lt;/span>type&lt;span style="color:#888">][&lt;/span>i&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">if&lt;/span>&lt;span style="color:#888">(&lt;/span>a&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]&lt;/span>&lt;span style="color:#666">==&lt;/span>type&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans&lt;span style="color:#888">[&lt;/span>type&lt;span style="color:#888">][&lt;/span>i&lt;span style="color:#888">]&lt;/span>&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">for&lt;/span>&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#2838b0;font-style:italic">int&lt;/span> i&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#444">1&lt;/span>&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">&amp;lt;=&lt;/span>n&lt;span style="color:#888">;&lt;/span>i&lt;span style="color:#666">++&lt;/span>&lt;span style="color:#888">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">if&lt;/span>&lt;span style="color:#888">(&lt;/span>i&lt;span style="color:#666">==&lt;/span>res&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret&lt;span style="color:#666">--&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret&lt;span style="color:#666">+=&lt;/span>ans&lt;span style="color:#888">[&lt;/span>a&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]][&lt;/span>res&lt;span style="color:#888">[&lt;/span>i&lt;span style="color:#888">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#888">(&lt;/span>&lt;span style="color:#b83838">&amp;#34;%lld&amp;#34;&lt;/span>&lt;span style="color:#888">,&lt;/span>ret&lt;span style="color:#888">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2838b0">return&lt;/span> &lt;span style="color:#444">0&lt;/span>&lt;span style="color:#888">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>